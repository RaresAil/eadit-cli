import { Inject, Injector, Retrieve } from '@adr-express-ts/core';
import { InjectType } from '@adr-express-ts/core/lib/@types';
import OAuthServer from '@adr-express-ts/oauth2';
import { isDeepStrictEqual } from 'util';
import {
  InvalidScopeError,
  PasswordModel,
  Client,
  Token,
  User
} from 'oauth2-server';

import OAuthRestrictMiddleware from './middlewares/OAuthRestrictMiddleware';
import OAuthLoginMiddleware from './middlewares/OAuthLoginMiddleware';
import { OAuthToken } from './@types/Entities';
import { addIfExists } from './utils';

@Inject
export default class PasswordGrant {
  public readonly SESSION_EXPIRE_TIME = 3600;

  public readonly server: OAuthServer;

  constructor() {
    Injector.inject(
      'OAuth2.Login',
      OAuthLoginMiddleware,
      InjectType.Middleware
    );
    Injector.inject(
      'OAuth2.Restrict',
      OAuthRestrictMiddleware,
      InjectType.Middleware
    );

    this.server = new OAuthServer({
      model: this.Model,
      // Here you can define the session time in seconds
      // Default is 3600s = 1 hour
      accessTokenLifetime: this.SESSION_EXPIRE_TIME,
      continueMiddleware: {
        // We set this to true, so when the user passed the OAuth2 token creation
        // To be sent to the responder where we will save the accessToken in
        // the cookie jar üç™
        token: true
      }
    });
  }

  private user: User = {
    id: '',
    username: ''
  };

  private get Model(): PasswordModel {
    return {
      verifyScope: async (
        token: Token,
        scope: string | string[]
      ): Promise<boolean> => false,
      getUser: async (username: string, password: string): Promise<any> => {
        console.log('%o %o %o', 'getUser', username, password);

        /**
         * Implement a function to get your user and check the password, return null if invalid
         */

        return this.user;
      },
      getClient: async (
        clientId: string,
        clientSecret?: string
      ): Promise<Client | null> => {
        try {
          console.log('%o %o %o', 'getClient', clientId, clientSecret);

          // search in db by
          // grants: 'password',
          // secret: clientSecret,
          // id: clientId
          return {
            id: clientId,
            grants: ['password']
          };
        } catch {
          return null;
        }
      },
      saveToken: async (
        token: Token,
        client: Client,
        user: User
      ): Promise<Token | null> => {
        try {
          console.log('%o %o %o %o', 'saveToken', token, client, user);

          // We make sure that the scope is a string array
          const scope = Array.isArray(token.scope)
            ? token.scope
            : [token.scope];

          // Check if the user only sent the `login` scope
          // You can change this and add multiple scopes if you want
          if (!isDeepStrictEqual(scope, ['login'])) {
            throw new InvalidScopeError(
              'The provided scope is not a valid one'
            );
          }

          let tokenData: OAuthToken = {
            accessToken: token.accessToken,
            clientId: client.id,
            userId: user.id
          };

          addIfExists(
            token.accessTokenExpiresAt,
            'accessTokenExpiresAt',
            tokenData
          );
          addIfExists(scope, 'scope', tokenData);

          // I removed the refresh token because we don't need it in this case
          // If you want to add it, uncomment the following lines
          // If you save the refreshToken, in the database, the document will be
          // deleted only after the refresh token expires
          //
          // addIfExists(
          //   token.refreshTokenExpiresAt,
          //   'refreshTokenExpiresAt',
          //   tokenData
          // );
          // addIfExists(token.refreshToken, 'refreshToken', tokenData);
          //

          // Save the token in the db

          return {
            // add the token to the response
            ...token,
            client,
            user
          };
        } catch (err) {
          // Throw the error to the user if the scope is invalid
          if (err?.name === 'invalid_scope') {
            throw err;
          }

          return null;
        }
      },
      getAccessToken: async (accessToken: string): Promise<Token | null> => {
        try {
          console.log('get access token %o', accessToken);
          // search for the token in the db
          const token: any = {};

          // Check to have only the 'login' scope in the request
          // if the return value is null, OAuth will sent 401 Unauthorized
          if (!isDeepStrictEqual(token.scope, ['login'])) {
            return null;
          }

          // search for the client in the db and return null if the client doesn't exists

          return {
            ...token,
            client: {},
            user: this.user
          } as Token;
        } catch (e) {
          return null;
        }
      }
    };
  }
}
